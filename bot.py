#!/usr/bin/env python
# coding: utf-8

# In[1]:

import os
import re
import requests
import openai
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

# === Telegram Application ===
application = Application.builder().token(TOKEN).build()

# === GPT-—Ñ—É–Ω–∫—Ü–∏—è ===
def ask_gpt(prompt):
    openai.api_key = OPENAI_API_KEY
    response = openai.ChatCompletion.create(
        model="gpt-4",  # –ò–ª–∏ gpt-3.5-turbo, –µ—Å–ª–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return response["choices"][0]["message"]["content"]

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Wildberries –∏–ª–∏ –æ–ø–∏—à–∏, —á—Ç–æ –∏—â–µ—à—å üõç")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if "wildberries.ru/catalog/" in text:
        match = re.search(r'catalog/(\d+)/', text)
        if not match:
            await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞.")
            return

        product_id = match.group(1)
        try:
            url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&nm={product_id}"
            response = requests.get(url).json()
            product = response["data"]["products"][0]
            title = product["name"]
            price = product["salePriceU"] // 100

            await update.message.reply_text(f"üõí {title}\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    else:
        gpt_response = ask_gpt(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –ß—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries?")
        await update.message.reply_text(f"ü§ñ GPT –¥—É–º–∞–µ—Ç:\n{gpt_response}")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# === Webhook –¥–ª—è Telegram ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    asyncio.run(application.process_update(update))
    return "ok"

# === Healthcheck (Render –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤ –ª–∏ —Å–µ—Ä–≤–∏—Å) ===
@app.route("/", methods=["GET"])
def health():
    return "–ë–æ—Ç –∂–∏–≤!"

# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == "__main__":
    print("‚öôÔ∏è –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞")

    port = os.environ.get("PORT")
    if not port or port == "":
        port = 5000
    else:
        port = int(port)

    app.run(host="0.0.0.0", port=port)




# In[ ]:




